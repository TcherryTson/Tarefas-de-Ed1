import java.util.Scanner;
import java.util.Stack;

 class VerificaExpressao {

    public static String corrigeExpressao(String expressao) {
        Stack<Character> pilha = new Stack<>();
        StringBuilder correcao = new StringBuilder(expressao);

        for (int i = 0; i < expressao.length(); i++) {
            char caractere = expressao.charAt(i);

            if (caractere == '(' || caractere == '[' || caractere == '{') {
                pilha.push(caractere);
            } else if (caractere == ')' || caractere == ']' || caractere == '}') {
                if (pilha.isEmpty()) {
                    correcao.insert(i, abreCorrespondente(caractere));
                } else {
                    char topo = pilha.pop();
                    if ((caractere == ')' && topo != '(') ||
                            (caractere == ']' && topo != '[') ||
                            (caractere == '}' && topo != '{')) {
                        correcao.setCharAt(i, fechaCorrespondente(topo));
                    }
                }
            }
        }

        while (!pilha.isEmpty()) {
            char restante = pilha.pop();
            correcao.append(fechaCorrespondente(restante));
        }

        return correcao.toString();
    }

    public static char abreCorrespondente(char fecha) {
        switch (fecha) {
            case ')': return '(';
            case ']': return '[';
            case '}': return '{';
            default: return ' ';
        }
    }

    public static char fechaCorrespondente(char abre) {
        switch (abre) {
            case '(': return ')';
            case '[': return ']';
            case '{': return '}';
            default: return ' ';
        }
    }

    public static boolean verificaExpressao(String expressao) {
        Stack<Character> pilha = new Stack<>();

        for (int i = 0; i < expressao.length(); i++) {
            char caractere = expressao.charAt(i);

            if (caractere == '(' || caractere == '[' || caractere == '{') {
                pilha.push(caractere);
            } else if (caractere == ')' || caractere == ']' || caractere == '}') {
                if (pilha.isEmpty()) {
                    return false;
                }

                char topo = pilha.pop();
                if ((caractere == ')' && topo != '(') ||
                        (caractere == ']' && topo != '[') ||
                        (caractere == '}' && topo != '{')) {
                    return false;
                }
            }
        }

        return pilha.isEmpty();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Digite uma expressão aritmética para verificar a parametrização:");
        String expressao = scanner.nextLine();

        if (verificaExpressao(expressao)) {
            System.out.println("Certo.");
        } else {
            System.out.println("Incorreto: " + expressao);
            System.out.println("Correção: " + corrigeExpressao(expressao));
        }

        scanner.close();
    }
}
