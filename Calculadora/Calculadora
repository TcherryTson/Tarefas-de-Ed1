import java.util.Scanner;
import java.util.Stack;

public class Calculadora {
    public static void main(String[] args) {
        Scanner nm = new Scanner(System.in);
        System.out.println("Digite:");
        System.out.println(" 1 - infixa.");
        System.out.println(" 2 - pos-fixa.");
        System.out.println(" 3 - pre-fixa.");
        int a = nm.nextInt();

        if (a == 1) {
            System.out.print("Digite a expressão infixa: ");
            String expressaoInfixa = nm.next();
            String expressaoPosFixa = infixaParaPosfixa(expressaoInfixa);
            int resultadoInFixa = avaliarPosFixa(expressaoPosFixa);
            System.out.println("Resultado: " + resultadoInFixa);
            System.out.println("Expressão pós-fixa: " + expressaoPosFixa);;
            String expressaoPreFixa = infixaParaPrefixa(expressaoInfixa);
            System.out.println("Expressão pré-fixa: " + expressaoPreFixa);
        } else if (a == 2) {
            System.out.print("Digite a expressão pos-fixa: ");
            String expressaoPosFixa = nm.next();
            int resultadoPosFixa = avaliarPosFixa(expressaoPosFixa);
            System.out.println("Resultado (pos-fixa): " + resultadoPosFixa);
            String expressaoInfixa = posfixaParaInfixa(expressaoPosFixa);
            System.out.println("Expressão infixa: " + expressaoInfixa);
            String expressaoPreFixa = infixaParaPrefixa(expressaoInfixa);
            System.out.println("Expressão pré-fixa: " + expressaoPreFixa);
        } else if (a == 3) {
            System.out.print("Digite a expressão pre-fixa: ");
            String expressaoPreFixa = nm.next();
            int resultadoPreFixa = avaliarPreFixa(expressaoPreFixa);
            System.out.println("Resultado (pre-fixa): " + resultadoPreFixa);
            String expressaoInfixa = prefixaParaInfixa(expressaoPreFixa);
            System.out.println("Expressão infixa: " + expressaoInfixa);
            String expressaoPosFixa = infixaParaPosfixa(expressaoInfixa);
            System.out.println("Expressão pós-fixa: " + expressaoPosFixa);
        }
    }

    public static String infixaParaPosfixa(String infix) {
        infix = infix.replaceAll("\\s+", "");
        StringBuilder posfixa = new StringBuilder();
        Stack<Character> pilha = new Stack<>();
        for (char c : infix.toCharArray()) {
            if (Character.isLetterOrDigit(c)) {
                posfixa.append(c);
            } else if (c == '(') {
                pilha.push(c);
            } else if (c == ')') {
                while (!pilha.isEmpty() && pilha.peek() != '(') {
                    posfixa.append(pilha.pop());
                }
                pilha.pop();
            } else {
                while (!pilha.isEmpty() && precedencia(c) <= precedencia(pilha.peek())) {
                    posfixa.append(pilha.pop());
                }
                pilha.push(c);
            }
        }
        while (!pilha.isEmpty()) {
            posfixa.append(pilha.pop());
        }
        return posfixa.toString();
    }

    public static String infixaParaPrefixa(String infix) {
        StringBuilder prefixa = new StringBuilder();
        Stack<Character> pilha = new Stack<>();
        for (int i = infix.length() - 1; i >= 0; i--) {
            char c = infix.charAt(i);
            if (Character.isLetterOrDigit(c)) {
                prefixa.insert(0, c);
            } else if (c == ')') {
                pilha.push(c);
            } else if (c == '(') {
                while (!pilha.isEmpty() && pilha.peek() != ')') {
                    prefixa.insert(0, pilha.pop());
                }
                pilha.pop();
            } else {
                while (!pilha.isEmpty() && precedencia(c) < precedencia(pilha.peek())) {
                    prefixa.insert(0, pilha.pop());
                }
                pilha.push(c);
            }
        }
        while (!pilha.isEmpty()) {
            prefixa.insert(0, pilha.pop());
        }
        return prefixa.toString();
    }

    public static String posfixaParaInfixa(String posfixa) {
        Stack<String> pilha = new Stack<>();
        for (char c : posfixa.toCharArray()) {
            if (Character.isLetterOrDigit(c)) {
                pilha.push(String.valueOf(c));
            } else {
                String operando2 = pilha.pop();
                String operando1 = pilha.pop();
                pilha.push("(" + operando1 + c + operando2 + ")");
            }
        }
        return pilha.pop();
    }

    public static String prefixaParaInfixa(String prefixa) {
        Stack<String> pilha = new Stack<>();
        for (int i = prefixa.length() - 1; i >= 0; i--) {
            char c = prefixa.charAt(i);
            if (Character.isLetterOrDigit(c)) {
                pilha.push(String.valueOf(c));
            } else {
                String operando1 = pilha.pop();
                String operando2 = pilha.pop();
                pilha.push("(" + operando1 + c + operando2 + ")");
            }
        }
        return pilha.pop();
    }

    public static int avaliarPosFixa(String posFixa) {
        Stack<Integer> pilha = new Stack<>();
        for (char c : posFixa.toCharArray()) {
            if (Character.isDigit(c)) {
                pilha.push(c - '0');
            } else {
                int operando2 = pilha.pop();
                int operando1 = pilha.pop();
                switch (c) {
                    case '+':
                        pilha.push(operando1 + operando2);
                        break;
                    case '-':
                        pilha.push(operando1 - operando2);
                        break;
                    case '*':
                        pilha.push(operando1 * operando2);
                        break;
                    case '/':
                        pilha.push(operando1 / operando2);
                        break;
                }
            }
        }
        return pilha.pop();
    }

    public static int avaliarPreFixa(String preFixa) {
        Stack<Integer> pilha = new Stack<>();
        for (int i = preFixa.length() - 1; i >= 0; i--) {
            char c = preFixa.charAt(i);
            if (Character.isDigit(c)) {
                pilha.push(c - '0');
            } else {
                int operando1 = pilha.pop();
                int operando2 = pilha.pop();
                switch (c) {
                    case '+':
                        pilha.push(operando1 + operando2);
                        break;
                    case '-':
                        pilha.push(operando1 - operando2);
                        break;
                    case '*':
                        pilha.push(operando1 * operando2);
                        break;
                    case '/':
                        pilha.push(operando1 / operando2);
                        break;
                }
            }
        }
        return pilha.pop();
    }

    public static int precedencia(char op) {
        switch (op) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            default:
                return -1;
        }
    }
}
